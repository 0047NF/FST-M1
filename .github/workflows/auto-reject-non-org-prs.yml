# yaml-language-server: $schema=https://json.schemastore.org/github-action.json

name: Auto Close PRs from Non-Org Members
author: Abhiram Kuchibhotla <abhiram@cklabs.com>
on:
  pull_request:
    types: [opened]
permissions:
  issues: write
  pull-requests: write
  contents: read
jobs:
  check-org-member:
    runs-on: ubuntu-latest
    steps:
      - name: Check if PR Author is a Member of the Org
        uses: actions/github-script@v6
        id: check
        with:
          github-token: ${{ secrets.ORG_TOKEN }}
          script: |
            const org = 'Training Support'; // Replace with your organization name
            const username = context.payload.pull_request.user.login;

            // Check if the PR author is a member of the org
            let isMember = false;

            try {
              const { data: membership } = await github.orgs.getMembershipForUser({
                org,
                username
              });

              if (membership && membership.state === 'active') {
                isMember = true;
              }
            } catch (error) {
              if (error.status === 404) {
                // User is not a member
                isMember = false;
              } else {
                // Some other error occurred
                throw error;
              }
            }

            if (isMember) {
              core.info(`${username} is a member of the org.`);
              core.setOutput('is_member', 'true');
            } else {
              core.info(`${username} is not a member of the org.`);
              core.setOutput('is_member', 'false');
            }
      - name: Close PR and Comment
        if: steps.check.outputs.is_member == 'false'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.ORG_TOKEN }}
          script: |
            const pr_number = context.payload.pull_request.number;
            const message = 'We do not accept PRs on this repo. Make sure you are pushing to your fork.';
            await github.issues.createComment({
              ...context.repo,
              issue_number: pr_number,
              body: message
            });
            await github.pulls.update({
              ...context.repo,
              pull_number: pr_number,
              state: 'closed'
            });
